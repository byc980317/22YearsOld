# NOTE: update this with your service name
service: api-22YearsOld

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-22YearsOld-infra

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2

  environment:
    usersTableName: !ImportValue '${self:custom.sstApp}-UsersTableName'
    openJobsTableName: !ImportValue '${self:custom.sstApp}-OpenJobsTableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-UsersTableArn'
        - !ImportValue '${self:custom.sstApp}-OpenJobsTableArn'

functions:
  search:
    handler: handlers/search.main
    events:
      - http:
          path: userSearches
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}